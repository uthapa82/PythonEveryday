### Principles of OOP 
1. Inheritance
2. Polymorphism
3. Encapsulation
4. Abstraction 

oop_1.py 
1. Create  a class (blueprint)
2. Create a instance (object)
3. Class vs instance 
4. instance attributes: defined in __init__(self) --> init function
5. class attribute

oop_2.py
1. Instance method(sef)
2. Our methods can take Arguments and can return values 
3. Special "dunder" method(__str__ and __eq__)
4. @static methods

oop_3.py
1. Inheritance: ChildClass(BaseClass)
2. inherit, extend, override 
3. super(): __init__()
4. Polymorphism

oop_4.py
1. Encapsulation
2. Abstraction
3. public, private 
    Note : 
    _x is called a "protected" attribute (one underscore)
    __x is called a "private" attribute (double underscore)

    Here we have used the word "private" for internal attributes with only
    one leading underscore as well 
4. _foo(), _x
5. getter / setter 
6. getter -> @property 
7. setter --> @name